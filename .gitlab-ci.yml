#
# Global variables

variables:
  MAJOR:
    value: 0
    description: The major version of this project
  MINOR:
    value: 0
    description: The minor version of this project
  PIP_CACHE_DIR:
    value: "${CI_PROJECT_DIR}/.cache/pip"
    description: Place where pip will cache previously downloaded packages
  VENV_DIR:
    value: "${CI_PROJECT_DIR}/.cache/venv"
    description: Location of the virtualenv

#
# Workflow for releases

workflow:
  rules:
  #
  # Don't rebuild release tags
  - if: '$CI_COMMIT_TAG =~ /^v.*/'
    when: never
  #
  # Don't build twice for a push and detached for a MR. Only build the detached build
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
    when: never
  #
  # Don't build if we state that this is draft commit
  - if: '$CI_COMMIT_TITLE =~ /^DRAFT:/'
    when: never
  #
  # We're evaluating whether the contributed code in a MR is okay
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    variables:
      STATE: "mr-eval"
  #
  # If we get a push to the branch from which we intend to make releases then do a release
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main"'
    variables:
      STATE: "release"
  #
  # This is a regular push event outside an MR
  # Don't build for a push to any branch but main
  - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME != "main"'
    when: never
    variables:
      STATE: "branch-push"
  - when: always

#
# Declare a cache for our pypy dependencies and the virtualenv

cache:
  paths:
  - .cache

#
# Declare images used

.python:
  image: python:3.10.5-slim

#
# Declare stages

stages:
  - build
  - test
  - release

#
# Build a distribution and install it locally

build-job:
  stage: build
  extends: .python
  script:
    - |
      # Calculating version number
      if [ "$STATE" == "release" ]; then
        export MRMAT_VERSION="${MAJOR}.${MINOR}.${CI_PIPELINE_IID}"
        echo "INFO - Release version is $MRMAT_VERSION"
      else
        export MRMAT_VERSION="${MAJOR}.${MINOR}.${CI_PIPELINE_IID}.dev0"
        echo "INFO - Project version is $MRMAT_VERSION"
      fi
      echo "MRMAT_VERSION=$MRMAT_VERSION" >> ${CI_PROJECT_DIR}/.buildenv
    - |
      # Prepare venv
      python -mvenv "${VENV_DIR}"
      . ${VENV_DIR}/bin/activate
      pip --cache-dir "${PIP_CACHE_DIR} install -U -r ${CI_PROJECT_DIR}/requirements.txt
      PYTHONPATH=$CI_PROJECT_DIR python -m build -n --wheel
    - |
      # Linting
      # We know the code is shit, but for now we just want a report
      pylint mrmat_ca || true
    #- |
      # Testing
      # There is no testsuite at the moment
      #pip install ${CI_PROJECT_DIR}/dist/water-*.whl
      #pytest --cov=mrmat_ca
  artifacts:
      paths:
      - ${CI_PROJECT_DIR}/dist/*
      reports:
        dotenv: ${CI_PROJECT_DIR}/.buildenv
        #junit: ${CI_PROJECT_DIR}/build/junit.xml

deploy-job:
  stage: release
  extends: .python
  script:
  - |
    export PATH="$HOME/.local/bin:$PATH"
    pip install twine
    TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
#  rules:
#    - if: '$STATE == "release"'
#      when: on_success
#    - when: never

release-job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli
  script:
  - echo "INFO - Releasing water ${MRMAT_VERSION}"
  release:
    name: $MRMAT_VERSION
    description: "Release $MRMAT_VERSION"
    tag_name: "v${MRMAT_VERSION}"
    ref: $CI_COMMIT_SHA
  rules:
  - if: '$STATE == "release"'
    when: on_success
  - when: never


